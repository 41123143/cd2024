var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://41123143.github.io/cd2024/ \xa0 \n 網誌:  https://41123143.github.io/cd2024/blog \n 簡報:  https://41123143.github.io/cd2024/reveal \n 倉儲:  https://github.com/41123143/cd2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': '期中影片', 'text': '\n \n', 'tags': '', 'url': '期中影片.html'}, {'title': '整理影片', 'text': '組別分工合作把這學期的教學影片上字幕並整理逐字稿 \n 自評:60 \n 1. 如何設定個人倉儲中的 Pelican 網誌 12:51 \n \n 逐字稿1 \n 設定網誌，名稱和slug不能重複 \n \n 2. 說明如何設定 Github 雙重認證 6:28] [說明如何設定 Github 雙重認證 6:28 \n \n 逐字稿2 \n 為了在電腦上登入github，必須得通過雙重認證 \n \n 3.如何將 41123130 的個人倉儲設為2a-miding?分組倉儲的子模組 12:11 \n \n 逐字稿3 \n 將各組員倉儲設為分組網站的子模組，優點是比較好整合各組員繪製的零件 \n', 'tags': '', 'url': '整理影片.html'}, {'title': 'LaTeX翻譯', 'text': '使用LaTeX排版及翻譯論文並轉成PDF檔 \n 負責頁數:1-11頁(不是最前面的羅馬數字部分) \n PDF檔 \n 程式碼檔 \n \n', 'tags': '', 'url': 'LaTeX翻譯.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'w10', 'text': '', 'tags': '', 'url': 'w10.html'}, {'title': '任務一', 'text': 'from browser import window, ajax, document, html\n\ndef fetch_csv_data():\n  # CSV 檔案網址\n  url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"\n  \n  def on_complete(req):\n    if req.status == 200 or req.status == 0:\n      # 讀取 CSV 檔案內容\n      content = req.text\n  \n      # 依照換行符號拆分資料\n      lines = content.split(\'\\n\')\n  \n      # 建立空列表儲存資料\n      data = []\n  \n      # 遍歷每一行資料\n      for line in lines:\n        # 忽略空白行\n        if line.strip() == "":\n          continue\n  \n        # 依照逗號拆分資料\n        items = line.split(\',\')\n  \n        # 將拆分後的資料加入列表\n        data.append(items)\n      \n      # 必須去除 data 的第一列標題資料, 只取序號為 1 之後的資料\n      data = data[1:]\n  \n      # 取得 html 可以插入的標註位置\n      brython_div = document["brython_div1"]\n      course_title = "cd2024"\n\n      # 逐一處理學員資料\n      index = 0\n      for items in data:\n        index += 1\n        student_id, github_username, group = items\n        \n        if github_username == "":\n          github_username = "000"\n        \n        # 建立網站和倉儲連結，使用正確的模板\n        site_url = f"https://{github_username}.github.io/{course_title}"\n        repo_url = f"https://github.com/{github_username}/{course_title}"\n        group_site_url = f"https://mdecd2024.github.io/2a-midag{group}"\n        group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"\n\n        # 添加學號, 網站, 倉儲連結和序號到 brython_div\n        brython_div <= str(index) + ". " + html.A(student_id, href=site_url)\n        brython_div <= " ("\n        brython_div <= html.A("repo", href=repo_url)\n        brython_div <= ") | " \n        brython_div <= html.A("Group Site", href=group_site_url)\n        brython_div <= " | "\n        brython_div <= html.A("Group Repo", href=group_repo_url)\n        brython_div <= html.BR()\n\n    else:\n      print("Error:", req.text)\n  \n  # 發送 AJAX 請求\n  req = ajax.ajax()\n  req.bind(\'complete\', on_complete)\n  req.open(\'GET\', url, True)\n  req.set_header(\'content-type\', \'application/x-www-form-urlencoded\')\n  req.send()\n  \n# 呼叫函式讀取 CSV 資料\nfetch_csv_data() \n \n', 'tags': '', 'url': '任務一.html'}, {'title': '任務二', 'text': '論文一：Construction and theoretical study of a ball balancing platform \n \xa0 這篇學位論文探討了利用自動控制理論來穩定動態系統的局限性，特別是通過構建和理論研究一個平衡球的平台。研究重點在於補償系統受到的擾動和外部作用，並比較物理實驗和基於牛頓力學的計算機模擬結果。為了達到這一目標，設計了一個滿足系統要求的控制器，並引入了比例-積分-微分（PID）控制器來實現球在平台上的平衡。研究進一步分析了在穩定本質上不穩定或半穩定系統時的局限性。 \n 結論: \n 這篇論文展示了自動控制理論在動態系統中的應用及其局限性。通過構建和分析一個平衡球平台，作者們深入探討了實際物理系統和計算機模擬結果之間的差異。設計和實現PID控制器的過程強調了理論與實踐之間的相互作用。這項研究有助於理解在穩定不穩定系統時所面臨的挑戰，並為未來改進控制系統提供了寶貴的見解。 \n \xa0 \n 論文二:A real time control system for balancing a ball on a platform with FPGA parallel implementation \n 這篇文章介紹了一種基於FPGA並行計算的新型PID調節器，用於提高實時控制系統中球在平台上的位置精度。研究中開發了控制球平衡的平台傳遞函數，並設計了在FPGA上實現的PID調節器。通過自然模擬驗證了該方法的精度提高。該系統展示了FPGA的高計算能力和並行處理特性，能夠有效控制多參數高速對象。 \n 結論: \n 這篇文章展示了利用FPGA並行計算實現高精度實時控制的潛力。通過成功設計和實現一個平衡球的平台控制系統，驗證了FPGA在處理複雜控制任務中的優越性。這種方法不僅提高了控制精度，還展示了硬件級並行計算在自動化和控制領域的廣泛應用前景。研究成果對未來的高性能控制系統設計具有重要參考價值。 \n \n 論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach \n 這篇文章探討了在雙軸平台上平衡球的控制系統，分析了PD控制器、狀態空間反饋控制和狀態空間觀測器反饋控制三種方法。實驗顯示，狀態空間觀測器反饋控制效果最佳。這種系統能應用於軍事技術，如攝影機穩定器和無人機控制，適用於船隻和飛機的穩定平台。文章旨在幫助非技術人員理解控制系統原理，並激勵未來的學生。 \n 結論: \n 這篇文章通過比較三種控制方法（PD控制、狀態空間反饋控制和狀態空間觀測器反饋控制），展示了在雙軸平台上平衡球的最佳解決方案。實驗結果證實，狀態空間觀測器反饋控制表現最優，適用於各種穩定平台的應用，如無人機和攝影機穩定器。文章易於理解，對於非技術人員也很友好，並且激發了對控制系統學習的興趣。 \n \n 論文四：Design and Implementation a Ball Balancing System for Control Theory Course \n 這篇文章討論了利用微控制器和控制算法來維持球在橫樑上平衡的球平衡系統設計。比較了三種原型，最終模型使用木材、舵機、超聲波傳感器和Arduino微控制器。控制算法基於PID，能夠實時調整橫樑角度。MATLAB用於實時數據採集和分析。討論了自適應控制和系統參數。這個項目作為控制理論應用的教學工具。 \n 結論: \n 這個球平衡系統展示了控制理論的應用，通過比較不同原型，了解了系統設計中的考慮因素。控制算法的應用讓系統能夠實時調整，保持球的平衡。這個項目不僅是一個有趣的學習機會，也加強了我們對控制理論的理解。 \n \n 論文五：Ball on the plate balancing control system \n 這篇論文介紹了一個球在平板上平衡的控制系統。該系統包括了機械設計和控制算法，用於維持球在平板中央位置。這個實驗設施使用電阻觸摸屏來收集球的位置數據，並利用步進馬達和PID控制器來調整平板的傾斜角度，從而保持球的平衡。該系統的設計和結果對於理解控制系統在平衡不穩定物體方面的應用具有重要意義。 \n 結論: \n 這個球在平板上平衡的控制系統展示了在控制系統設計和機械結構設計方面的巧妙結合。通過使用電阻觸摸屏和步進馬達，系統能夠有效地維持球的平衡，展示了在工業自動化和機器人控制方面的應用潛力。這項工作為未來進一步發展更複雜的控制系統提供了有價值的參考和啟示。 \n \n 論文六：2D Ball Balancer Control using QUARC \n 這份實驗指導手冊介紹了如何使用QUARC和SRV02伺服機進行2D球平衡控制。實驗目標是設計一個比例-速度（PV）補償器和比例-積分-微分（PID）控制器來穩定平衡板上的球。內容包括從基本原理建模、獲得系統的傳遞函數、內外循環控制器設計、抗積分飽和等控制技術的應用，以及模擬和實現控制器並評估其性能。 \n 結論:\xa0 \n 這個實驗提供了寶貴的實踐機會，讓學生能夠將理論知識應用於實際控制系統中。通過設計和實現多層次的控制器，學生能夠深入理解控制系統的動態行為和調整策略。同時，實驗也強調了控制系統在面對實際硬體限制時的挑戰和解決方法，增強了學生的問題解決能力和技術應用技能。 \n \n', 'tags': '', 'url': '任務二.html'}, {'title': '任務三', 'text': '零件三 \n \n \n', 'tags': '', 'url': '任務三.html'}, {'title': 'w17', 'text': '', 'tags': '', 'url': 'w17.html'}, {'title': '項目一', 'text': '零件檔 \n \n \n', 'tags': '', 'url': '項目一.html'}, {'title': '項目二', 'text': 'py檔 \n \n \n', 'tags': '', 'url': '項目二.html'}, {'title': '項目三', 'text': '', 'tags': '', 'url': '項目三.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};