<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://41123143.github.io/cd2024/">https://41123143.github.io/cd2024/</a> </p>
<p>網誌: <a href="https://41123143.github.io/cd2024/blog">https://41123143.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://41123143.github.io/cd2024/reveal">https://41123143.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/41123143/cd2024">https://github.com/41123143/cd2024</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>期中影片</h1>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8GchSL6DanU?si=d3RBg7FpAlrh1Zcl" title="YouTube video player" width="560"></iframe></p>
<h1>整理影片</h1>
<p>組別分工合作把這學期的教學影片上字幕並整理逐字稿</p>
<p>自評:60</p>
<p>1.<span>如何設定個人倉儲中的 Pelican 網誌 12:51</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IGnBsPt-0wQ?si=QRA7qWtb3du1FSAR" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EcYcKBSHLr1Pr1Ex_P5wRIEBZX0MmSmuxViLy5SaYjrifQ?e=MjBuO6">逐字稿1</a></p>
<p><span>設定網誌，名稱和slug不能重複</span></p>
<p><span></span></p>
<p>2.<span>說明如何設定 Github 雙重認證 6:28] [說明如何設定 Github 雙重認證 6:28</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5Vy5rmStQ_E?si=e0tPFVM5KKo-_RGg" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EeYg-AObEulCoeeTtYNPcTABtwwFmJfFBGkj1gV-76Y__A?e=ecACTk">逐字稿2</a></p>
<p><span>為了在電腦上登入github，必須得通過雙重認證</span></p>
<p><span></span></p>
<p>3.如何將 41123130 的個人倉儲設為2a-miding?分組倉儲的子模組 12:11</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8rfcbftNBig?si=6nhlJD1Sj56hK7qg" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EXgKNNz0deZDjDAPxv6aYzYB5IpdU9E3MXHuatLRnzM7aQ?e=37obuF">逐字稿3</a></p>
<p><span>將各組員倉儲設為分組網站的子模組，優點是比較好整合各組員繪製的零件</span></p>
<h1>LaTeX翻譯</h1>
<p>使用LaTeX排版及翻譯論文並轉成PDF檔</p>
<p>負責頁數:1-11頁(不是最前面的羅馬數字部分)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/41123143_nfu_edu_tw/EaQfQXjJBghLmdXDmg-iIC0B_q-y3LKjBRHVpCSof3C38A?e=qEkR55">PDF檔</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:w:/g/personal/41123143_nfu_edu_tw/EQP4e4vdiElOr6t93HX9Dw8BmGIiRaTxyj5-esNwYiMfWg?e=3aN4M4">程式碼檔</a></p>
<p></p>
<h1>Homework</h1>
<h2>w10</h2>
<h3>任務一</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax, document, html

def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"
  
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
  
      # 依照換行符號拆分資料
      lines = content.split('\n')
  
      # 建立空列表儲存資料
      data = []
  
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
  
        # 依照逗號拆分資料
        items = line.split(',')
  
        # 將拆分後的資料加入列表
        data.append(items)
      
      # 必須去除 data 的第一列標題資料, 只取序號為 1 之後的資料
      data = data[1:]
  
      # 取得 html 可以插入的標註位置
      brython_div = document["brython_div1"]
      course_title = "cd2024"

      # 逐一處理學員資料
      index = 0
      for items in data:
        index += 1
        student_id, github_username, group = items
        
        if github_username == "":
          github_username = "000"
        
        # 建立網站和倉儲連結，使用正確的模板
        site_url = f"https://{github_username}.github.io/{course_title}"
        repo_url = f"https://github.com/{github_username}/{course_title}"
        group_site_url = f"https://mdecd2024.github.io/2a-midag{group}"
        group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"

        # 添加學號, 網站, 倉儲連結和序號到 brython_div
        brython_div &lt;= str(index) + ". " + html.A(student_id, href=site_url)
        brython_div &lt;= " ("
        brython_div &lt;= html.A("repo", href=repo_url)
        brython_div &lt;= ") | " 
        brython_div &lt;= html.A("Group Site", href=group_site_url)
        brython_div &lt;= " | "
        brython_div &lt;= html.A("Group Repo", href=group_repo_url)
        brython_div &lt;= html.BR()

    else:
      print("Error:", req.text)
  
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
  
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<p><br/><br/></p>
<h3>任務二</h3>
<p><span>論文一：Construction and theoretical study of a ball balancing platform</span></p>
<p> <span>這篇學位論文探討了利用自動控制理論來穩定動態系統的局限性，特別是通過構建和理論研究一個平衡球的平台。研究重點在於補償系統受到的擾動和外部作用，並比較物理實驗和基於牛頓力學的計算機模擬結果。為了達到這一目標，設計了一個滿足系統要求的控制器，並引入了比例-積分-微分（PID）控制器來實現球在平台上的平衡。研究進一步分析了在穩定本質上不穩定或半穩定系統時的局限性。</span></p>
<p>結論:</p>
<p><span>這篇論文展示了自動控制理論在動態系統中的應用及其局限性。通過構建和分析一個平衡球平台，作者們深入探討了實際物理系統和計算機模擬結果之間的差異。設計和實現PID控制器的過程強調了理論與實踐之間的相互作用。這項研究有助於理解在穩定不穩定系統時所面臨的挑戰，並為未來改進控制系統提供了寶貴的見解。</span></p>
<p><span> </span></p>
<p><span>論文二:A real time control system for balancing a ball on a platform with FPGA parallel implementation</span></p>
<p><span>這篇文章介紹了一種基於FPGA並行計算的新型PID調節器，用於提高實時控制系統中球在平台上的位置精度。研究中開發了控制球平衡的平台傳遞函數，並設計了在FPGA上實現的PID調節器。通過自然模擬驗證了該方法的精度提高。該系統展示了FPGA的高計算能力和並行處理特性，能夠有效控制多參數高速對象。</span></p>
<p>結論:</p>
<p><span>這篇文章展示了利用FPGA並行計算實現高精度實時控制的潛力。通過成功設計和實現一個平衡球的平台控制系統，驗證了FPGA在處理複雜控制任務中的優越性。這種方法不僅提高了控制精度，還展示了硬件級並行計算在自動化和控制領域的廣泛應用前景。研究成果對未來的高性能控制系統設計具有重要參考價值。</span></p>
<p></p>
<p><span>論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach</span></p>
<p><span>這篇文章探討了在雙軸平台上平衡球的控制系統，分析了PD控制器、狀態空間反饋控制和狀態空間觀測器反饋控制三種方法。實驗顯示，狀態空間觀測器反饋控制效果最佳。這種系統能應用於軍事技術，如攝影機穩定器和無人機控制，適用於船隻和飛機的穩定平台。文章旨在幫助非技術人員理解控制系統原理，並激勵未來的學生。</span></p>
<p>結論:</p>
<p><span>這篇文章通過比較三種控制方法（PD控制、狀態空間反饋控制和狀態空間觀測器反饋控制），展示了在雙軸平台上平衡球的最佳解決方案。實驗結果證實，狀態空間觀測器反饋控制表現最優，適用於各種穩定平台的應用，如無人機和攝影機穩定器。文章易於理解，對於非技術人員也很友好，並且激發了對控制系統學習的興趣。</span></p>
<p><span></span></p>
<p><span>論文四：Design and Implementation a Ball Balancing System for Control Theory Course</span></p>
<p><span>這篇文章討論了利用微控制器和控制算法來維持球在橫樑上平衡的球平衡系統設計。比較了三種原型，最終模型使用木材、舵機、超聲波傳感器和Arduino微控制器。控制算法基於PID，能夠實時調整橫樑角度。MATLAB用於實時數據採集和分析。討論了自適應控制和系統參數。這個項目作為控制理論應用的教學工具。</span></p>
<p><span>結論:</span></p>
<p><span>這個球平衡系統展示了控制理論的應用，通過比較不同原型，了解了系統設計中的考慮因素。控制算法的應用讓系統能夠實時調整，保持球的平衡。這個項目不僅是一個有趣的學習機會，也加強了我們對控制理論的理解。</span></p>
<p><span></span></p>
<p><span>論文五：Ball on the plate balancing control system</span></p>
<p><span>這篇論文介紹了一個球在平板上平衡的控制系統。該系統包括了機械設計和控制算法，用於維持球在平板中央位置。這個實驗設施使用電阻觸摸屏來收集球的位置數據，並利用步進馬達和PID控制器來調整平板的傾斜角度，從而保持球的平衡。該系統的設計和結果對於理解控制系統在平衡不穩定物體方面的應用具有重要意義。</span></p>
<p>結論:</p>
<p><span>這個球在平板上平衡的控制系統展示了在控制系統設計和機械結構設計方面的巧妙結合。通過使用電阻觸摸屏和步進馬達，系統能夠有效地維持球的平衡，展示了在工業自動化和機器人控制方面的應用潛力。這項工作為未來進一步發展更複雜的控制系統提供了有價值的參考和啟示。</span></p>
<p><span></span></p>
<p><span>論文六：2D Ball Balancer Control using QUARC</span></p>
<p><span>這份實驗指導手冊介紹了如何使用QUARC和SRV02伺服機進行2D球平衡控制。實驗目標是設計一個比例-速度（PV）補償器和比例-積分-微分（PID）控制器來穩定平衡板上的球。內容包括從基本原理建模、獲得系統的傳遞函數、內外循環控制器設計、抗積分飽和等控制技術的應用，以及模擬和實現控制器並評估其性能。</span></p>
<p><span>結論: </span></p>
<p><span>這個實驗提供了寶貴的實踐機會，讓學生能夠將理論知識應用於實際控制系統中。通過設計和實現多層次的控制器，學生能夠深入理解控制系統的動態行為和調整策略。同時，實驗也強調了控制系統在面對實際硬體限制時的挑戰和解決方法，增強了學生的問題解決能力和技術應用技能。</span></p>
<p><span></span></p>
<h3>任務三</h3>
<p>零件三</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t2cZbCGajLI?si=0YOfhiBimOQQMJbQ" title="YouTube video player" width="560"></iframe></p>
<p><span></span></p>
<h2><span>w17</span></h2>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>